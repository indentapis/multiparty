// Copyright 2023 Indent Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package multiparty.v1;

import "google/api/annotations.proto";
import "google/api/expr/v1alpha1/checked.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// Services

// Rules allows for [Rules][multiparty.v1.Rule] to be created, updated, retrieved, and deleted.
service Rules {
  // Creates new [Rule][multiparty.v1.Rule] in the given space.
  rpc CreateRule(CreateRuleRequest) returns (Rule) {
    option (google.api.http) = {
      post: "/v1/{space}/rules"
      body: "rule"
    };
  }

  // Updates an existing [Rule][multiparty.v1.Rule].
  rpc UpdateRule(UpdateRuleRequest) returns (Rule) {
    option (google.api.http) = {
      patch: "/v1/{space}/rules/{rule_name}"
      body: "rule"
    };
  }

  // Get a [Rule][multiparty.v1.Rule] by name.
  rpc GetRule(GetRuleRequest) returns (Rule) {
    option (google.api.http) = {get: "/v1/{space}/rules/{rule_name}"};
  }

  // List [Rules][multiparty.v1.Rule] in a space.
  rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
    option (google.api.http) = {get: "/v1/{space}/rules"};
  }

  // Delete a [Rule][multiparty.v1.Rule] by name.
  rpc DeleteRule(DeleteRuleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{space}/rules/{rule_name}"};
  }
}

// Types

// Config defines the behavior of Multiparty.
message Config {
  // Rules specify how Multiparty responds to events.
  repeated Rule rules = 1;
}

// Rule constrains Multiparty to specific behaviors.
message Rule {
  // Name of the Rule.
  string name = 1;

  // Description of the purpose of Rule.
  string description = 2;

  // If contains a CEL expression that must evaluate to true for the Rule to be applied.
  string if = 4;

  // Outcome is the result of the Rule.
  Outcome outcome = 5;
}

// Outcome is the result of a Rule.
message Outcome {
  repeated google.protobuf.Value events = 1;
}

// Test defines a set of checks to verify the behavior of a Rule.
message Test {
  // Name of the Test.
  string name = 1;

  // In is the input used to validate the behavior of a Rule.
  google.protobuf.Value in = 2;

  // Checks verify the behavior of a Rule.
  repeated Check checks = 3;
}

// Check verifies the behavior of a Rule.
message Check {
  // If contains a CEL expression that must evaluate to true for the Check to pass.
  string if = 1;

  // Title is a human readable name for the Requirement.
  string title = 2;

  // Description of the purpose of Rule.
  string description = 3;

  // Origin is the location of the Requirement.
  Origin origin = 4;

  // Compiled version of Ensure set by Multiparty.
  google.api.expr.v1alpha1.CheckedExpr compiled = 5;
}

// Origin is the location of a Requirement's source.
message Origin {
  // Path to the source.
  string path = 1;
  // Line number of the source.
  uint32 line = 2;
}

// Requests

// EvalRequest is the request to evaluate policies.
message EvalRequest {
  // Config is the configuration to evaluate.
  Config config = 1;

  // Tests verifies the behavior of a Rule.
  repeated Test tests = 2;
}

// EvalResponse is the response to evaluate policies.
message EvalResponse {
  // Results of the evaluation.
  repeated Result results = 1;
}

// Result is the result of evaluating a policy.
message Result {
  // Rules that applied to the evaluation.
  repeated Rule rules = 1;
  // Outcome of the evaluation.
  repeated Outcome events = 2;
  // Failures encountered during evaluation.
  repeated Failure failures = 3;
}

// Failure is a failure encountered during evaluation.
message Failure {
  // Check that failed.
  Check check = 1;
  // Error encountered.
  string error = 2;
}

// CreateRuleRequest is the request to create a Rule.
message CreateRuleRequest {
  // Space to create the Rule in.
  string space = 1;

  // Rule to create.
  Rule rule = 2;
}

// UpdateRuleRequest is the request to update a Rule.
message UpdateRuleRequest {
  // Space to update Rule.
  string space = 1;

  // Name of Rule to update.
  string rule_name = 2;

  // Rule to update.
  Rule rule = 3;
}

// GetRuleRequest is the request to get a Rule.
message GetRuleRequest {
  // Space to get Rule from.
  string space = 1;

  // Name of Rule to get.
  string rule_name = 2;
}

// ListRulesRequest is the request to list Rules.
message ListRulesRequest {
  // Space to list Rules from.
  string space = 1;
}

// ListRulesResponse is the response to list Rules.
message ListRulesResponse {
  // Rules in the space.
  repeated Rule rules = 1;
}

// DeleteRuleRequest is the request to delete a Rule.
message DeleteRuleRequest {
  // Space to delete Rule from.
  string space = 1;

  // Name of Rule to delete.
  string rule_name = 2;
}
